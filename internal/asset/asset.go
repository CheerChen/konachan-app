// Code generated by go-bindata.
// sources:
// web/static/index.html
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x8f\xdb\xc6\xb5\x7f\x0f\x90\xef\x70\xc2\x6c\x22\xc9\x5e\x92\xd2\xda\xbe\xd7\x90\x45\xf9\x26\xf6\x45\xb2\xf7\x26\xb1\xaf\x1d\xdf\x02\x35\x0c\x79\x44\x1e\x91\xe3\x1d\xce\xb0\x33\xa3\xd5\x2a\x0b\x3d\x35\x4d\xd3\x16\xc8\x43\x5f\xfa\x27\x28\x92\x87\xa2\xe8\x5b\x81\xf6\x21\x41\x91\xe4\xd3\x64\x1b\xf7\xa9\xf9\x08\xc5\x0c\x49\x89\xa2\x28\xed\xda\x4d\xde\xca\x07\xaf\x38\x73\xfe\xcd\x6f\xce\x39\x73\xce\xd0\x83\x44\xa7\x6c\xf8\xe2\x0b\x83\x04\x49\x34\x7c\xf1\x05\x00\x80\x41\x8a\x9a\x40\x98\x10\xa9\x50\x07\xce\x54\x4f\xdc\xeb\xce\xda\x1c\x27\x29\x06\x8e\xc4\x09\x4a\x89\xd2\x81\x50\x70\x8d\x5c\x07\x0e\xc7\x63\x94\x8e\x5f\x12\x6b\xaa\x19\x0e\xef\x26\x42\x8b\xfb\x33\x9a\x21\x44\x98\x8a\x81\x9f\x0f\x17\x34\x8c\xf2\x23\x90\xc8\x02\x47\xe9\x39\x43\x95\x20\x6a\x07\x12\x89\x93\xc0\x49\xb4\xce\x54\xdf\xf7\x53\x72\x12\x46\xdc\x1b\x0b\xa1\x95\x96\x24\x33\x2f\xa1\x48\xfd\xe5\x80\x7f\xc5\xbb\xe2\x5d\xf3\x43\xa5\x56\x63\x5e\x4a\xb9\x17\x2a\x65\x4c\x2f\x74\xbd\xe4\xba\x70\x98\x66\x42\x6a\xa8\x18\x75\xdf\xea\x05\xd7\x7d\x16\x93\xc2\x88\x3f\x51\x5e\xc8\xc4\x34\x9a\x30\x22\xd1\xda\x43\x9e\x90\x13\x9f\xd1\xb1\xf2\x33\x23\x5e\x19\xf1\xfe\x55\xaf\xe7\x75\x2b\x03\xa5\x4d\xdf\x9b\xaa\x08\x27\x64\xca\xb4\xab\x8e\x28\x5f\x7b\x69\x40\xe3\x35\xd0\x62\x1a\x26\x20\x26\x30\x21\x3c\xa4\x1c\x95\x82\x6f\x3f\xf9\xe5\xfb\x75\x38\xac\x49\xad\xd2\xa4\x89\xe0\x5a\x79\xb1\x10\x31\x43\x92\x51\x65\x4d\x0a\x95\xba\x39\x21\x29\x65\xf3\xe0\x75\xaa\x35\xca\xfe\xd5\x6e\x77\xff\x3f\xbb\xdd\xfd\xab\xdd\x2e\xd5\x84\xd1\xb0\x65\xd7\xda\x5a\xad\xb5\x05\x7a\x9e\x61\xd0\xd2\x78\xa2\x8d\x80\x56\xa9\xd4\x92\x14\x2f\xe6\x19\x8b\x68\x0e\xa7\xab\x77\x3b\x46\xc2\xa3\x58\x8a\x29\x8f\xfa\xf0\xf2\xc1\xc1\xc1\x8d\xf5\x69\x63\xa4\x9b\x1b\xd4\x87\x56\x6e\x52\x6b\x1f\xde\x40\x21\x63\x4a\xf6\xe1\x5d\x9a\xa2\xda\x07\x45\xb8\x72\x15\x4a\x3a\xa9\xf0\x2f\x4a\x94\xcc\x93\xf4\xea\x9a\x53\x22\x63\xca\xfb\x70\x80\xe9\x36\x26\x2f\x53\xb3\x6c\x34\x0a\x49\xa6\xa9\xe0\xa3\x51\x88\x5c\xa3\xac\x0b\x32\xeb\x76\x09\xa3\x31\xef\x43\x4e\xb1\x4d\xde\x84\xc6\x53\x89\x75\xfe\x09\xc3\x93\x3e\x1c\x5c\x7b\xe5\x46\xdd\xc0\x13\x77\x46\x23\x9d\x34\x4d\x66\x24\x8a\x28\x8f\xfb\xd0\x85\xab\xd9\xc9\x36\x85\x34\x8d\x9b\x97\xed\x6a\x91\xf5\xe1\xfa\x1a\xa7\x79\x8e\x51\x6a\x1a\x12\x56\xae\x27\xa5\x51\xc4\xb0\x46\x54\x18\xd5\xeb\x76\x5f\xd9\x8a\x9c\xca\x48\xb8\x09\x55\x82\x34\x4e\x74\x1f\xae\xed\xc0\x3c\x26\x8c\xa1\xdc\x70\x94\x88\xaa\x8c\x91\x79\xdf\xc2\x55\xf7\x12\x86\x27\xee\x4c\x92\xac\x0f\xe6\xdf\xe7\x82\xca\xbf\x04\xf7\x50\x65\x82\x2b\x7a\x8c\xc0\xc8\x5c\x4c\x35\xb8\x90\x92\x23\x54\x40\x40\xcf\x04\x84\x82\x4d\x53\xee\x16\x73\x94\x2b\x8d\x24\xb2\x61\x27\xa6\xb2\x98\x55\x70\xc9\x5f\x09\xfd\xaf\x14\x23\x4a\x40\x85\x12\x91\x03\xe1\x11\xb4\x2b\xbb\x7a\xbd\xdb\xcd\x4e\x3a\xf5\x85\x7a\xb9\xa0\xfa\x30\x2c\x3d\xe5\x5a\xb7\xee\x0c\xb0\xee\x2d\x9b\x04\x8b\xe7\x59\xb4\x4e\xb0\xb2\x6c\x05\x4a\x93\xf0\x08\x04\x07\x2d\x32\xb3\x6a\x24\x26\xe9\xe8\x04\x65\x15\x0b\x8e\x27\x1a\xb4\xa8\xce\x5e\x1c\x91\xff\x78\x3e\x44\x6a\x9e\xd8\x00\x49\x03\x45\x13\x26\x03\xbf\xcc\x59\x03\xbf\x38\x4d\x07\x26\x6b\x99\xbf\x11\x3d\x86\x90\x11\xa5\x02\xc7\x9c\x95\x84\x72\x94\xcb\x33\xa0\x32\x29\xc5\xcc\xa9\x24\xbd\x75\x3e\xe6\xaa\xd4\xed\x1d\x40\xf1\x4b\x4c\x26\x0a\xb5\xdb\x5d\x65\xf4\x25\x5b\xd2\x2b\xb9\x6c\x7e\xc9\x13\x4b\x55\x70\xf9\xfc\xaf\xe0\x24\x4c\x08\x77\x49\x96\x0d\xc6\xb2\x81\x62\xa0\x52\xc2\xd8\x70\x80\xe9\xd0\xee\x4e\x46\x62\x74\x87\x03\x1f\xd3\xe1\xc0\xcf\xe7\x6a\xca\xfd\xa4\xb7\x69\x91\x39\x6b\xde\x30\xc1\x39\xb7\x51\x96\xa1\x04\x9d\x10\x0d\x05\x1a\x0a\x08\x63\x40\x35\xa6\x95\x73\x78\x0d\x05\x1a\x05\x4e\x11\xdd\x4e\xb9\xb8\xe5\xbb\x65\x0c\x45\x86\xf6\x97\x3d\x51\xec\xe9\xd9\xf7\x7d\x15\x26\x98\x12\x4f\xc8\xd8\x3f\x4c\x49\x8c\x6f\x14\x3c\xd6\xc4\xba\xe5\x11\x3d\x5e\x33\xbd\x1c\xa9\xfe\x5e\x51\xd9\x45\xdd\x17\x29\x82\x49\x58\x94\xc7\xf0\xed\x27\xbf\xfe\x59\x6e\x7f\x75\xe7\xf2\x74\xe6\x0c\x57\x9c\x05\xef\x3d\x21\x34\x20\xc3\x14\xb9\x36\xee\xbf\xaa\x49\x3c\x78\x7b\xaa\x34\x24\xe4\x18\x73\x29\x60\x4e\x13\x6f\x53\xb6\x19\x76\x40\x93\x31\xe5\x11\x9e\x04\x8e\xdb\x73\x40\x0a\x86\x81\x13\x51\xc2\x44\xec\x00\x91\x94\xb8\x09\x8d\x22\xe4\x81\xa3\xe5\x14\x97\x7e\x67\x4c\x78\x7d\x79\x84\xd6\x0c\xa8\x40\x73\xa8\x5b\x26\x8b\x29\xcc\x88\x24\x1a\x97\x16\x13\x05\x84\xd3\x94\x68\xb3\x74\x61\x20\xd0\x73\xa0\x0a\x26\x44\xe9\x7c\x7f\x39\xc8\x78\x4c\xda\x1d\xaf\x52\x4d\xd4\x8c\x1f\x8d\xc6\xf1\x0a\x9a\xa5\x5d\xf7\x19\x8d\x50\x2d\x7d\x65\x46\x75\x02\xe2\x18\xe5\x84\x89\x59\x3f\x5f\xcd\x4e\xa1\x2a\x94\x82\x31\x9b\xd7\xd7\x02\xca\xc8\xbe\x55\x46\x60\xee\x82\x89\x60\x91\x02\x65\x15\x7a\xeb\x1e\x51\x29\x12\x8f\x10\x33\x05\x82\xb3\x39\x5c\x31\x50\xe9\x04\x53\xa0\xdc\x26\xba\xdb\x77\xde\x36\x59\x4b\x99\xdd\x4a\x31\x15\x72\x5e\x93\x73\x5b\xf0\x96\x86\x54\x44\x74\x32\x37\x1c\x0a\xe1\x0a\xe4\x86\x1a\x87\x2d\x11\x55\xfb\x10\x11\x4d\x0c\x86\x24\x8a\x30\x02\x46\x0c\x90\xa2\xba\xd4\xe6\xe5\x6e\x24\x95\xed\xa4\x46\xe1\x3a\xe0\xdf\x27\xed\xc6\xbb\xd9\x80\xdb\x79\x4d\x0a\xed\x15\xbe\x0f\x0e\x47\xc5\x68\x07\xa8\xc9\x56\x13\x12\x62\xe5\xbc\x30\xdb\x63\xdc\x8c\x48\x24\x1e\xdc\x22\x1c\xc6\x68\x5a\x14\x1e\x63\x74\x2e\x3a\x53\x0a\xe5\x0f\xb7\x08\x85\xf3\x71\xd2\x22\x73\xc7\xa4\x31\x6b\xda\x45\x58\x37\x92\x82\x29\x63\x13\x28\x64\x13\x17\x4f\x32\x46\x38\xd1\xc6\x01\xe0\x8e\x8c\x50\x42\xb8\xcb\xd2\x5d\xfb\x39\xcd\x53\x76\x13\xf6\x96\x65\x3c\xd5\x5a\xf0\x5a\x24\xe5\x63\xd5\x17\xd7\x0d\x99\x50\xe8\x80\xed\xb9\x02\xe7\x96\x79\x83\xf6\x7f\xab\xb0\x63\x84\xe7\x44\xff\x92\x7c\x95\x10\xb9\x92\x7f\xdf\xbe\x7d\x37\x92\x27\x6a\x29\xf6\x5d\x11\xc7\x0c\x61\x32\x65\x2c\x3f\xfd\xbf\x23\x15\xef\x09\x91\x2e\x95\xfc\x50\x08\x13\xd2\xbe\x98\xea\xdd\xe2\xcd\xf6\xdf\x95\xc8\x04\x31\x5b\x6c\x7a\x5a\x28\x4e\x9b\x50\x44\x98\x21\xf7\xa8\xf0\x23\x9a\x2a\x13\xd5\xe2\xd8\xcf\x90\xfb\xf3\xf9\xeb\x3f\x10\xf7\xb6\xec\xbf\x11\x58\x66\xd5\x19\x65\x0c\x62\xd4\x95\xbc\x3f\x1a\x65\xa5\x36\xd7\x25\xa1\x36\xf5\xd6\x2c\x41\x0e\xcb\x61\x93\x32\xe4\x94\x73\x13\x22\x17\x74\xb1\x25\x6f\x93\x87\x9f\xc3\x32\x1a\xd1\x70\x23\x84\x2e\xcc\x1b\x1a\x7c\xb7\xf3\x9e\xcb\x1f\x09\x9e\xef\x50\x73\x68\x2c\x65\xec\x98\xdf\x1a\x56\x4d\xa9\xee\x42\xe9\xcf\x86\x81\x9b\x8a\x88\x30\xd8\x18\x29\xb3\x4e\x39\x43\x79\xcc\xd0\xd5\xeb\x67\xd3\x79\xb2\xb5\x10\x4c\xd3\x6c\x4b\x3e\x6e\x1a\xbb\x70\x18\x10\x29\xc5\xcc\x75\x19\x4e\xf4\x32\x1a\xee\x4a\x3c\xa6\x62\xaa\xa0\x6d\x67\xc1\x4c\x76\x36\xd2\x66\x73\x94\x3c\xb3\x66\x69\x5a\xbb\xa5\xea\x77\x4c\xa1\x59\xa8\xb5\x33\x17\xd6\xbb\x99\x48\xf3\xf6\xfb\x62\x38\xd7\x7a\xf5\x8b\x21\x7d\x81\x1a\xb1\xb8\x72\x7a\xf2\x7f\x53\xd3\x9b\x9a\xbe\xa5\x7a\xfb\x14\x4a\x9a\xe9\xa2\xec\x1d\x28\xfb\x06\x4a\x86\x95\xfb\x1f\x11\xa1\xf7\xe4\x47\x86\xd9\xde\xb3\xe4\x3f\xdd\x03\xaf\xe7\x5d\xb5\x97\x5c\x4f\x94\x31\x35\x67\xdd\x2a\xe4\xf9\xef\xab\xbe\x7f\x15\xee\x94\xba\xc5\x45\x55\x93\xb6\xa5\xbe\x02\xe6\xd6\x54\x21\x28\x2d\x69\xa8\x5b\x37\xca\x7a\xdd\xbf\x04\x31\x13\x63\xc2\x0a\x9c\xf7\x2b\x20\x57\x7f\xaf\x2a\x8d\x7d\xd3\x7d\x28\xc1\xd0\x36\x99\xa5\x9c\xf6\x64\xca\x43\xe3\x06\xd0\xde\xb3\xdd\xe4\x6a\xab\x8f\x89\x34\x99\xf9\x81\x64\x77\x89\x24\x29\x9a\xe2\x2c\x80\x25\x7d\x6d\xaa\xad\xec\xcf\x8d\x8e\xd4\x48\x51\x77\x49\x8c\x0f\xee\xbd\x05\x01\xcc\x28\x8f\xc4\xcc\x63\x22\x24\x46\x8a\xa7\x90\xc8\x30\xf1\xd4\x74\x6c\x56\xc8\xe3\x76\xaf\xb3\xbf\xe9\xbc\xea\xc1\xbd\xb7\xfe\xdf\x94\xf6\x63\x86\x0a\x82\xa5\x40\x4f\x65\x8c\xea\x76\xeb\xd5\x56\x23\xd7\xd2\xb8\x77\x48\x8a\x0d\x04\xf4\x46\xbd\x29\x9a\x08\x09\x6d\x0a\x01\x74\x6f\x00\x85\xc1\xba\x62\x8f\x21\x8f\x75\x72\x03\xe8\xe5\xcb\x1b\xeb\xdc\x54\x68\xec\xac\xb2\x3f\xa4\x8f\x4a\x7b\x83\x56\x67\x43\xb5\x35\x68\x02\xed\x75\x21\x0f\xbb\x8f\x20\x08\x02\xd8\x82\x6e\xf9\x48\xd4\x53\xc9\x6b\x06\x3c\xec\xe5\xbc\x53\x1e\xe1\x84\x72\x8c\xe0\x26\x98\x96\x08\xfa\x10\xa1\x09\xb3\x07\xf7\x0e\x6f\x89\x34\x13\x1c\xb9\xae\xeb\xed\x3d\xea\x34\xdc\x13\x2c\xb6\x5f\x0c\xac\x2d\xc8\xf7\xe1\x90\x53\x0d\x98\x66\x7a\x0e\xe5\x3d\x15\x91\x92\xcc\xd7\x1d\x6c\x59\xca\x43\x00\x0f\x1f\xd5\x65\xbc\x25\x4c\x3d\x7c\x8c\x72\x29\x22\x6f\x9a\x4d\x52\xc9\xa6\x2a\x01\x6a\x2f\x50\x4c\x57\x52\x93\xed\xfb\xb0\xd7\x6e\x25\xbd\x56\xc7\x0b\x19\x0d\x8f\x2a\x7e\x8e\xc7\xc8\xf5\x1a\x92\x0c\xf3\x4e\x1f\x02\xe8\x55\x16\x6d\x76\xa3\xee\xe5\x8e\xa1\x73\x3a\xf0\x52\x00\x7c\xca\xd8\xc6\x86\x14\x62\xb6\xb0\xad\xdd\xa3\x54\xb5\x33\x9a\x52\x6d\xd4\x77\xbb\xe7\x19\x60\x49\x77\x58\x50\x8a\xda\xc6\xb8\xd5\x86\xa9\x64\x10\xc0\x63\x3f\x11\xda\xdf\x3b\xb5\xd4\x0b\x7f\xef\xd4\x58\xbe\x78\x7c\x63\xfd\x02\xc1\xd0\x6b\x12\x43\x00\x8e\x73\x9e\xc1\x9a\xc4\x3b\xcc\xcd\xa5\x34\x33\xad\x53\xe6\xf6\x39\xbe\xc4\x54\x68\xf4\x7b\xdd\xae\xef\xc0\xe5\x1c\xf1\xcb\xe0\xd8\x17\x4d\xe2\x9a\xd7\x96\x5e\xa0\xf1\x44\xb7\x35\x89\x3b\x5b\x6f\x9c\x4b\x07\x21\x51\x74\xf0\x2e\x89\x95\xa5\xae\x9b\x5b\x04\xda\xe3\x01\x29\x3e\x5b\xdc\x34\xfa\x83\xde\xab\x9a\xc4\xc1\xde\x29\xf2\x8d\xb8\x32\x52\x16\x0e\x68\x22\x63\xd4\x81\x33\x1a\x33\xc2\x8f\x9c\xe1\xde\xa9\x26\xf1\x62\xe0\x93\xe1\xe3\x6d\x16\xed\x79\x31\xea\xff\xb9\x7f\xe7\x9d\xf6\x54\xb2\xfd\x95\x81\x6d\xd3\x36\x6f\x58\xb6\xe7\x21\x09\x13\x3b\xe7\x99\x7f\xaa\x0c\x74\xdf\x06\x4e\x63\xfa\x30\x51\x18\x45\x64\xae\xb4\x34\xa9\x95\xe3\x0c\x5e\x33\xb1\xd4\x6e\x8a\xff\x0a\xa1\x11\xe8\x69\x12\xab\x22\xa9\x39\xe0\x34\x27\x35\xeb\x2b\xa6\xd4\x31\xde\x35\x48\xae\x96\x55\x08\x61\xcc\x0d\x45\x66\x2f\xa7\x96\x70\x96\xa7\xeb\x51\x71\x55\x67\x4f\xd5\x4c\x28\xed\xab\x44\xcc\xfc\xbd\x53\xab\x96\x46\x8d\x88\x96\x73\x06\x55\x70\x61\xef\xb4\x34\xd7\x4b\x49\xd6\x2e\xf7\xb5\xe3\x3d\x11\x94\x5b\x7b\x17\xf6\xf6\xf2\xea\x70\x90\x0d\xbf\xf9\xf8\xf3\xaf\xbf\xf8\xe2\xec\xe7\x9f\xfe\xed\x77\x3f\x3e\xfb\xf0\x83\x7f\x7c\xf1\xdb\x42\x5e\x3a\x1f\xa9\x50\x48\x5c\x80\x0f\xdf\x7c\xfc\xf9\xd9\x4f\xfe\x72\xf6\xd7\x3f\xac\xa6\xf5\x64\x44\xa3\x89\x99\x7c\xfa\xa7\xf7\xd7\x18\x97\x5c\x67\x1f\x7e\xf0\xf4\xab\x3f\x7e\xf3\xd1\x4f\xa1\x98\xb1\x37\xad\x8b\x4b\xc5\x5b\x7e\xd3\xbf\x00\xbf\x02\x83\x1f\x89\x19\x37\x1d\xc0\xce\x15\x7f\xfd\xf9\x2f\x9e\x7e\xf9\xa5\x59\xed\xc0\xcf\xd6\xfc\xa8\x1a\x90\x39\xbf\x1a\x4d\xc8\xf1\xd6\xf3\x23\xdf\x9f\xcb\x66\x83\xc6\xc3\xb3\xcf\xfe\xfc\xf4\xa3\xcf\xce\xbe\xfa\xd5\xc0\x1f\x0f\x2b\x26\x21\x43\x8d\x3b\x0d\x3a\xfb\xf0\xd3\xbf\xff\xe6\xf7\x75\xa7\xae\x38\x77\x93\x6f\xd8\xbb\xa8\x43\x8d\x29\x04\xdb\xcc\x4b\x95\x0c\xfb\xb9\xc7\x65\xa6\x50\xc7\xd9\xc8\x84\x44\x33\xf1\x8a\x56\x91\x34\x63\xb8\x83\x74\xb6\x4e\x68\xf7\x65\x0b\x69\xb2\x4e\x9a\x6f\xda\x16\x5a\x8b\x66\x3f\xff\xd3\x00\x43\x03\x34\xcb\x63\xd0\x33\xc7\x5a\x7b\x09\x49\x53\x0c\x1a\xcc\xf2\xcf\x63\x6f\xea\x94\xd5\x53\x70\xf9\x5c\x74\xe7\xd7\x24\x3d\x1e\x14\xdf\xdd\x0c\x67\x26\x45\x16\x38\x44\x29\x11\x52\xa2\x31\x7a\x1b\x23\x4a\x9e\xe9\xf6\xf9\xce\xf8\x09\x86\x7a\x2d\xbe\xf7\x4e\x97\x6b\xf3\x94\x0c\x17\x8e\xbd\x03\x74\x8b\x5e\x24\x70\x8a\x77\xbb\x13\xeb\xd4\xb3\x92\x36\x87\x7e\x7d\x32\x59\x38\x15\x9b\x8b\x0f\xf4\x0f\x24\xb3\xba\x69\x1a\xe7\xa5\x7b\x95\x23\xcd\xb5\xaf\x98\x74\x32\x4d\xc7\x9c\x50\xe6\x00\x61\x3a\x70\xec\x0a\x20\xc2\xbc\x16\x37\x5d\x15\xd8\x2f\x1e\x81\x53\x5c\xfe\xf6\xbb\x5e\xcf\x14\xee\x26\xfa\x72\xd8\x86\x8f\x1b\x76\x1b\x90\xa9\x8d\x0f\x99\xff\x46\xff\x99\xd1\x3f\x1f\xe9\xcd\xa1\xbd\xb6\xf3\x72\xf9\xd9\xa4\xe3\x91\x2c\x43\x1e\xb5\x57\x98\xd7\xa3\x6b\xb1\x79\x80\xf9\x3e\xdc\xb6\xc5\x33\xd8\x32\x12\x6c\xf1\x08\xa6\xfd\xa9\x14\xa4\x1b\x15\x07\xd9\x59\x76\x6e\xda\xe9\xfb\x70\x57\xe6\xa2\xcb\xce\xa8\xb8\x44\xdd\xa4\xb5\x64\x36\x0d\x22\xd7\x45\x6f\xd7\x6e\x3e\x79\x57\xc6\x0b\xeb\x0b\xb6\x6e\x2e\x0d\x17\x16\x56\xd5\x5c\x10\xec\x65\x6a\x96\x41\x60\xd6\x62\xbf\xec\xb7\x3a\x0f\xbb\x8f\xb6\x64\xbb\x42\xd0\xf6\xec\x6d\x1e\xfb\xc1\xa6\x0f\x7b\x6d\x9d\x50\xd5\xf1\x32\x22\x4d\x6d\xd4\xca\xf7\xa2\xd5\xf1\xec\x7c\xbb\xa9\x8b\x2b\x9f\x71\x7c\xa7\x88\x3b\xe8\x7a\xd7\xaf\xed\xa0\x34\x95\xc2\x9b\x34\xc2\x25\xbd\x69\x7a\x76\xd0\xdb\x3b\xe3\x3b\xfc\xbe\xfd\x88\xd2\x87\x09\x61\x6a\x1b\xf9\x62\x1b\xce\xa6\xdb\xa1\x84\xd1\xf7\xb0\xd2\x7c\x37\x63\x5b\x6e\x40\x5e\x6b\xad\xa8\xdb\x16\xf4\x1d\xcd\x7b\x7e\x42\xec\x97\x80\x37\x9d\x0d\x85\x6c\x8f\x72\xaa\x37\x0a\xb8\x06\xf7\xb6\xd5\x31\xd8\x0f\x9b\x17\xea\x94\xca\xc7\xf6\x2c\x0d\xed\xbc\x49\x33\x65\x93\x7b\xd3\x3a\x4d\x33\x6f\xd1\x26\x39\xbd\x6d\x47\xd7\xb3\xf6\x5d\xe5\xb3\xbb\xff\xba\x58\x51\xd2\xb4\x28\x08\x80\x99\x2e\x23\x2f\xf7\x4d\xab\xd1\xce\x88\x54\x78\xc8\x75\xdb\x0c\x75\xe0\x32\xf4\x1a\x01\x6f\x7c\xf1\xfd\x72\x37\xf2\xb1\x45\x3b\xbf\xc6\xe9\x98\xc1\xea\xcd\x93\x5f\x7e\x53\xf7\xed\x7f\x5d\xfb\x67\x00\x00\x00\xff\xff\x68\x0e\x62\x88\xc1\x26\x00\x00")

func webStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webStaticIndexHtml,
		"web/static/index.html",
	)
}

func webStaticIndexHtml() (*asset, error) {
	bytes, err := webStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/static/index.html", size: 9921, mode: os.FileMode(438), modTime: time.Unix(1564325980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/static/index.html": webStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"static": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{webStaticIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
